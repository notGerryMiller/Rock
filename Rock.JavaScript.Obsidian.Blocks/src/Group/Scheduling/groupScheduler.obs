<!-- Copyright by the Spark Development Network; Licensed under the Rock Community License -->
<template>
    <Alert v-if="blockErrorMessage" alertType="warning">
        {{ blockErrorMessage }}
    </Alert>

    <div v-if="!blockErrorMessage" class="new-group-scheduler">
        <div class="panel panel-block styled-scroll">
            <div class="panel-heading">
                <h3 class="panel-title">Group Scheduler</h3>
            </div>

            <!-- Toolbar -->
            <div class="panel-collapsable">
                <!-- Desktop -->
                <div class="panel-toolbar d-none d-md-flex flex-wrap flex-sm-nowrap justify-content-between">
                    <div class="d-block text-muted clickable" @click="onSelectFiltersClick"><i class="fa fa-sliders-h"></i> {{ filtersText }}</div>

                    <div class="d-block">
                        <RockButton :btnSize="BtnSize.ExtraSmall"><i class="fa fa-clone"></i> Clone Schedules</RockButton>
                        <RockButton :btnSize="BtnSize.ExtraSmall" @click="onSelectIndividualsClick"><i class="fa fa-calendar-check"></i> Rosters</RockButton>
                        <RockButton :btnSize="BtnSize.ExtraSmall"><i class="fa fa-magic"></i> Auto Schedule</RockButton>
                        <RockButton :btnSize="BtnSize.ExtraSmall"><i class="fa fa-envelope-o"></i> Send Now</RockButton>
                    </div>
                </div>

                <!-- Mobile -->
                <div class="panel-toolbar panel-toolbar-mobile d-flex d-md-none justify-content-between">
                    <RockButton :btnSize="BtnSize.Small" @click="onSelectFiltersClick"><i class="fa fa-sliders-h"></i> Filters</RockButton>

                    <div class="d-flex">
                        <div class="dropdown">
                            <button class="btn btn-default btn-square btn-sm" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fa fa-caret-down"></i></button>
                            <ul class="dropdown-menu dropdown-menu-right">
                                <li>
                                    <button type="button" class="dropdown-item btn-link text-nowrap"><i class="fa fa-envelope-o"></i> Send Now</button>
                                </li>
                                <li>
                                    <button type="button" class="dropdown-item btn-link text-nowrap"><i class="fa fa-clone"></i> Clone Schedules</button>
                                </li>
                                <li>
                                    <button type="button" class="dropdown-item btn-link text-nowrap"><i class="fa fa-calendar-check"></i> Rosters</button>
                                </li>
                                <li>
                                    <button type="button" class="dropdown-item btn-link text-nowrap"><i class="fa fa-magic"></i> Auto Schedule</button>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <SelectFilters v-model:isVisible="isSelectFiltersVisible"
                       :appliedFilters="config.filters"
                       @applyFilters="onApplyFilters" />

        <selectIndividuals v-model:isVisible="isSelectIndividualsVisible"
                           :resourceSettings="config.resourceSettings"
                           @assignIndividuals="onAssignIndividuals" />
    </div>
</template>

<script setup lang="ts">
    import { computed, ref } from "vue";
    import SelectFilters from "./GroupScheduler/selectFilters.partial.obs";
    import selectIndividuals from "./GroupScheduler/selectIndividuals.partial.obs";
    import Alert from "@Obsidian/Controls/alert.obs";
    import RockButton from "@Obsidian/Controls/rockButton";
    import { BtnSize } from "@Obsidian/Enums/Controls/btnSize";
    import { getSecurityGrant, onConfigurationValuesChanged, provideSecurityGrant, useConfigurationValues, useReloadBlock } from "@Obsidian/Utility/block";
    import { GroupSchedulerFiltersBag } from "@Obsidian/ViewModels/Blocks/Group/Scheduling/GroupScheduler/groupSchedulerFiltersBag";
    import { GroupSchedulerInitializationBox } from "@Obsidian/ViewModels/Blocks/Group/Scheduling/GroupScheduler/GroupSchedulerInitializationBox";

    const config = useConfigurationValues<GroupSchedulerInitializationBox>();

    const securityGrant = getSecurityGrant(config.securityGrantToken);
    const reloadBlock = useReloadBlock();

    // #region Values

    const isSelectFiltersVisible = ref(false);
    const isSelectIndividualsVisible = ref(false);

    // #endregion

    // #region Computed Values

    const blockErrorMessage = computed((): string | undefined | null => {
        return config.errorMessage;
    });

    const filtersText = computed((): string => {
        let groups = "All Groups";
        let weeks = "Weeks: 2/5, 2/12";
        let locations = "All Locations";
        let schedules = "All Schedules";

        return `Filters: ${groups} | ${weeks} | ${locations} | ${schedules}`;
    });

    // #endregion

    // #region Event Handlers

    /**
     * Handles the click event of the "Filters..." elements, to show the `SelectFilters` component.
     */
    function onSelectFiltersClick(): void {
        isSelectFiltersVisible.value = true;
    }

    /**
     * Handles the `applyFilters` event of the `SelectFilters` component.
     *
     * @param filters The selected filters.
     */
    function onApplyFilters(filters: GroupSchedulerFiltersBag): void {
        console.log(JSON.stringify(filters));
    }

    /**
     * Handles the click event of the "Add Individuals" buttons, to show the `SelectIndividuals` component.
     */
    function onSelectIndividualsClick(): void {
        isSelectIndividualsVisible.value = true;
    }

    /**
     * Handles the `assignIndividuals` event of the `SelectIndividuals` component.
     *
     * @param individuals The selected individuals.
     */
    function onAssignIndividuals(individuals: any): void {
        console.log(JSON.stringify(individuals));
    }

    // #endregion

    provideSecurityGrant(securityGrant);

    onConfigurationValuesChanged(reloadBlock);
</script>
