//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Rock.CodeGeneration project
//     Changes to this file will be lost when the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// <copyright>
// Copyright by the Spark Development Network
//
// Licensed under the Rock Community License (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.rockrms.com/license
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// </copyright>
//

using System;
using System.Linq;

using Rock.ViewModels.Utility;

namespace Rock.ViewModels.Entities
{
    /// <summary>
    /// NotificationMessage View Model
    /// </summary>
    public partial class NotificationMessageBag : EntityBagBase
    {
        /// <summary>
        /// Gets or sets the component data json. This data is only understood
        /// by the component itself and should not be modified elsewhere.
        /// </summary>
        /// <value>
        /// The component data json.
        /// </value>
        public string ComponentDataJson { get; set; }

        /// <summary>
        /// Gets or sets the count of the message. This value will be summed
        /// for all visible messages and used as the total number of messages.
        /// It will also usually be displayed as a badge on the message itself.
        /// </summary>
        /// <value>
        /// The count of the message.
        /// </value>
        public int Count { get; set; }

        /// <summary>
        /// Gets or sets the description of the message. This should be a
        /// somewhat short string, such as a couple of sentences.
        /// </summary>
        /// <value>
        /// The description of the message.
        /// </value>
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the date and time the message will automatically expire
        /// and be removed.
        /// </summary>
        /// <value>
        /// The date and time the message will be removed.
        /// </value>
        public DateTime ExpireDateTime { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this message has been read.
        /// </summary>
        /// <value>
        /// true if this message has been read; otherwise, false.
        /// </value>
        public bool IsRead { get; set; }

        /// <summary>
        /// Gets or sets the key that identifies this instance to the component.
        /// The key allows components to look up existing messages so they can
        /// be updated. null values are allowed.
        /// </summary>
        /// <value>
        /// A System.String that identifies this instance.
        /// </value>
        public string Key { get; set; }

        /// <summary>
        /// Gets or sets the date and time at which point the message will be
        /// shown to the individual. By default the current date and time will
        /// be used, but setting to a future date is allowed.
        /// </summary>
        /// <value>
        /// The date and time at which point the message will become visible.
        /// </value>
        public DateTime MessageDateTime { get; set; }

        /// <summary>
        /// Gets or sets the identifier of the Rock.Model.NotificationMessageType
        /// that handles logic for this instance.
        /// </summary>
        /// <value>
        /// A System.Int32 representing the Id of the Rock.Model.EntityType.
        /// </value>
        public int NotificationMessageTypeId { get; set; }

        /// <summary>
        /// Gets or sets the person alias identifier of the individual this
        /// message should be displayed to.
        /// </summary>
        /// <value>
        /// The person alias identifier.
        /// </value>
        public int PersonAliasId { get; set; }

        /// <summary>
        /// Gets or sets the title of the message. This should be a very short
        /// string, such as only a few words.
        /// </summary>
        /// <value>
        /// The title of the message.
        /// </value>
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets the created date time.
        /// </summary>
        /// <value>
        /// The created date time.
        /// </value>
        public DateTime? CreatedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the modified date time.
        /// </summary>
        /// <value>
        /// The modified date time.
        /// </value>
        public DateTime? ModifiedDateTime { get; set; }

        /// <summary>
        /// Gets or sets the created by person alias identifier.
        /// </summary>
        /// <value>
        /// The created by person alias identifier.
        /// </value>
        public int? CreatedByPersonAliasId { get; set; }

        /// <summary>
        /// Gets or sets the modified by person alias identifier.
        /// </summary>
        /// <value>
        /// The modified by person alias identifier.
        /// </value>
        public int? ModifiedByPersonAliasId { get; set; }

    }
}
